generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Agency {
  id                  Int                   @id @default(autoincrement())
  agency_name         String
  public_code         String?               @unique(map: "Agency_public_code_key")
  logo                String?
  license_number      String                @unique(map: "Agency_license_number_key")
  agency_email        String?
  phone               String?
  address             String?               @db.Text
  website             String?
  status              Agency_status         @default(active)
  owner_user_id       Int                   @unique(map: "Agency_owner_user_id_key")

  owner               User                  @relation(fields: [owner_user_id], references: [id], map: "Agency_owner_user_id_fkey")
  agents              AgencyAgent[]
  requests            RegistrationRequest[]
}

model AgencyAgent {
  id                Int                        @id @default(autoincrement())
  agency_id         Int
  agent_id          Int
  added_by          Int?
  id_card_number    String?
  role_in_agency    AgencyAgent_role_in_agency @default(agent)
  commission_rate   Decimal?                   @db.Decimal(5, 2)
  start_date        DateTime?
  end_date          DateTime?
  status            AgencyAgent_status         @default(active)
  created_at        DateTime                   @default(now())
  updated_at        DateTime                   @updatedAt

  addedBy           User?                      @relation("AgentAddedBy", fields: [added_by], references: [id], map: "AgencyAgent_added_by_fkey")
  agency            Agency                     @relation(fields: [agency_id], references: [id], map: "AgencyAgent_agency_id_fkey")
  agent             User                       @relation("AgencyAgent", fields: [agent_id], references: [id], map: "AgencyAgent_agent_id_fkey")

  @@unique([agency_id, agent_id], map: "AgencyAgent_agency_id_agent_id_key")
  @@index([added_by], map: "AgencyAgent_added_by_fkey")
  @@index([agent_id], map: "AgencyAgent_agent_id_fkey")
}

model RegistrationRequest {
  id                   Int                                 @id @default(autoincrement())
  user_id              Int
  request_type         RegistrationRequest_request_type
  id_card_number       String?
  agency_name          String?
  agency_id            Int?
  supporting_documents String?                             @db.Text
  status               RegistrationRequest_status          @default(pending)
  reviewed_by          Int?
  review_notes         String?                             @db.Text
  reviewed_at          DateTime?
  requested_role       RegistrationRequest_requested_role?
  license_number       String?
  created_at           DateTime                            @default(now())
  updated_at           DateTime                            @updatedAt

  agency               Agency?                             @relation(fields: [agency_id], references: [id], map: "RegistrationRequest_agency_id_fkey")
  reviewer             User?                               @relation("RequestReviewer", fields: [reviewed_by], references: [id], map: "RegistrationRequest_reviewed_by_fkey")
  user                 User                                @relation("RequestSubmitter", fields: [user_id], references: [id], map: "RegistrationRequest_user_id_fkey")

  @@unique([user_id, request_type, status], map: "RegistrationRequest_user_id_request_type_status_key")
  @@index([agency_id], map: "RegistrationRequest_agency_id_idx")
  @@index([request_type], map: "RegistrationRequest_request_type_idx")
  @@index([reviewed_by], map: "RegistrationRequest_reviewed_by_idx")
  @@index([status], map: "RegistrationRequest_status_idx")
  @@index([user_id], map: "RegistrationRequest_user_id_idx")
}

model User {
  id                         Int                   @id @default(autoincrement())
  username                   String                @unique(map: "User_username_key")
  email                      String                @unique(map: "User_email_key")
  password                   String
  first_name                 String?
  last_name                  String?
  about_me                   String?               @db.Text
  profile_img                String?
  phone                      String?
  website                    String?
  role                       User_role
  status                     User_status           @default(active)
  email_verified             Boolean               @default(false)
  last_login                 DateTime?
  last_active                DateTime?
  created_at                 DateTime              @default(now())
  updated_at                 DateTime              @updatedAt
  verification_token         String?
  verification_token_expires DateTime?

  ownedAgency                Agency?
  addedAgents                AgencyAgent[]         @relation("AgentAddedBy")
  agencyMemberships          AgencyAgent[]         @relation("AgencyAgent")
  notifications              Notification[]
  reviewedRequests           RegistrationRequest[] @relation("RequestReviewer")
  submittedRequests          RegistrationRequest[] @relation("RequestSubmitter")
  usernameHistory            UsernameHistory[]
}

model UsernameHistory {
  id                   Int      @id @default(autoincrement())
  user_id              Int
  old_username         String
  new_username         String
  next_username_update DateTime @default(now())
  user                 User     @relation(fields: [user_id], references: [id], map: "UsernameHistory_user_id_fkey")

  @@index([user_id], map: "UsernameHistory_user_id_idx")
}

model Notification {
  id                      Int                       @id @default(autoincrement())
  userId                  Int
  type                    String
  status                  Notification_status       @default(unread)
  createdAt               DateTime                  @default(now())
  user                    User                      @relation(fields: [userId], references: [id], onDelete: Cascade, map: "Notification_userId_fkey")
  translations            NotificationTranslation[]

  @@index([userId], map: "Notification_userId_fkey")
}

model NotificationTranslation {
  id             Int          @id @default(autoincrement())
  notificationId Int
  languageCode   String
  message        String
  notification   Notification @relation(fields: [notificationId], references: [id], onDelete: Cascade, map: "NotificationTranslation_notificationId_fkey")

  @@index([notificationId], map: "NotificationTranslation_notificationId_fkey")
}

model Category {
  id           Int                    @id @default(autoincrement()) 
  slug         String                 @unique                       
  createdAt    DateTime               @default(now())
  updatedAt    DateTime               @updatedAt
  translations CategoryTranslation[]
}
model CategoryTranslation {
  id          Int       @id @default(autoincrement())
  categoryId  Int
  language    LanguageCode
  name        String

  category    Category  @relation(fields: [categoryId], references: [id])

  @@unique([categoryId, language]) // Ensure one translation per language per category
}



enum RegistrationRequest_request_type {
  agent_license_verification
  agency_registration
  role_change_request
}

enum AgencyAgent_role_in_agency {
  agent
  senior_agent
  team_lead
}

enum RegistrationRequest_status {
  pending
  approved
  rejected
  under_review
}

enum Agency_status {
  active
  inactive
  suspended
}

enum AgencyAgent_status {
  active
  inactive
  terminated
}

enum User_role {
  user
  agency_owner
  agent
}

enum RegistrationRequest_requested_role {
  agent
  senior_agent
  team_lead
}

enum User_status {
  active
  inactive
  pending
  suspended
}

enum Notification_status {
  unread
  read
}
enum LanguageCode {
  en
  al
}